#!/bin/bash
#
# Copyright (C) 2009-2013 FoundationDB, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#
# CONTROLLING STARTUP:
#   - Command line parameters
#   - JVM_OPTS -- Additional arguments to the JVM.
#     Influenced by <config>/jvm.options, if it exists.
#

# Use JAVA_HOME if set, otherwise look for java in PATH
if [ -x "$JAVA_HOME/bin/java" ]; then
    JAVA="$JAVA_HOME/bin/java"
else
    JAVA=$(which java)
fi

echo_die()
{
    echo $@ >&2
    exit 1
}

QUIET="no"
echo_quiet()
{
    if [ "$QUIET" = "no" ]; then
        echo $@
    fi
}

infer_home_dir()
{
    local loc_dev="$(cd $(dirname $0)/..; pwd -P)"
    local loc_local="/usr/local/foundationdb/sql"
    local loc_global="/usr/share/foundationdb/sql"
    local value=""

    # Only infer if passed no argument
    if [ -z "$1" ]; then
        if [ -d "$loc_dev/target" ]; then
            value="$loc_dev"
        elif [ -d "$loc_local" ]; then
            value="$loc_local"
        elif [ -d "$loc_global" ]; then
            value="$loc_global"
        else
            echo_die "Unknown home location"
        fi
    else
        value="$1"
    fi
    export FDBSQL_HOME="$value"
}

infer_jar_file()
{
    local loc_dev="${FDBSQL_HOME}/fdb-sql-layer-core/target"
    local loc_home="${FDBSQL_HOME}/fdb-sql-layer.jar"
    local value=""

    # Only infer if passed no argument
    if [ -z "$1" ]; then
        # Try dev first so you can develop *and* have a system package installed
        if [ -d "$loc_dev" ]; then
            value=$(ls "$loc_dev"/fdb-sql-layer*.jar |grep -v -E '\-sources|\-tests')
            if [ -z "$value" ]; then
                echo_die "Developer directory detected but no jar found"
            fi
        elif [ -f "$loc_home" ]; then
            value="$loc_home"
        else
            echo_die "Unknown core jar location"
        fi
    else
        value="$1"
    fi
    export JAR_FILE="$value"
}

infer_jar_rf_file()
{
    local loc_dev="${FDBSQL_HOME}/fdb-sql-layer-routinefw/target"
    local loc_home="${FDBSQL_HOME}/fdb-sql-layer-routinefw/fdb-sql-layer-routinefw.jar"
    local value=""

    # Only infer if passed no argument
    if [ -z "$1" ]; then
        # Try dev first so you can develop *and* have a system package installed
        if [ -d "$loc_dev" ]; then
            value=$(ls "$loc_dev"/fdb-sql-layer-routinefw*.jar |grep -v -E '\-sources|\-tests')
            if [ -z "$value" ]; then
                echo_die "Developer directory detected but no jar found"
            fi
        elif [ -f "$loc_home" ]; then
            value="$loc_home"
        else
            echo_die "Unknown routine firewall jar location"
        fi
    else
        value="$1"
    fi
    export JAR_RF_FILE="$value"
}

infer_dep_dir()
{
    local loc_dev="${FDBSQL_HOME}/fdb-sql-layer-core/target/dependency"
    local loc_home="${FDBSQL_HOME}/server"
    local value=""

    # Only infer if passed no argument
    if [ -z "$1" ]; then
        # Try dev first so you can develop *and* have a system package installed
        if [ -d "$loc_dev" ]; then
            value="$loc_dev"
        elif [ -d "$loc_home" ]; then
            value="$loc_home"
        else
            echo_die "Unknown dependency location"
        fi
    else
        value="$1"
    fi
    export DEP_DIR="$value"
}


SECURITYMAN="true"
set_security_manager()
{
    local value="-Djava.security.manager"
    if [ ${SECURITYMAN} = "false" ]; then
        value=""
    fi
    export SEC_MAN="$value"
}


get_version()
{
    infer_home_dir "$1"
    infer_jar_file "$2"
    infer_dep_dir "$3"
    CLASSPATH="$JAR_FILE":"$DEP_DIR"/*

    server_version=$(exec "$JAVA" -cp "$CLASSPATH" com.foundationdb.server.GetVersion)
    persistit_version=$(exec "$JAVA" -cp "$CLASSPATH" com.persistit.GetVersion)
    echo "server   : ${server_version}"
    echo "persistit: ${persistit_version}"
}

wait_on_pid()
{
    local PIDFILE="$1"
    if [ "$PIDFILE" = "" ]; then
        echo_die "pid file required"
    fi

    local ATTEMPTS=1
    while [ ! -s "$PIDFILE" -a $ATTEMPTS -lt 60 ]; do
        sleep 1
        ATTEMPTS=$(expr $ATTEMPTS + 1)
        # Simple secondary check for *any* java process to avoid 60s wait
        pidof java >/dev/null || break
    done

    test -s "$PIDFILE"
    return $?
}

launch_service()
{
    infer_home_dir "$1"
    foreground=$2
    props=$3
    usegui=$4
    pidpath=$5
    infer_jar_file "$6"
    infer_dep_dir "$7"
    FDBSQL_CONF=$8
    infer_jar_rf_file 
    set_security_manager 

    if [ -z "$FDBSQL_CONF" ]; then
        FDBSQL_CONF="${FDBSQL_HOME}/conf"
    fi
    
    POLICY_FILE="-Djava.security.policy=${FDBSQL_CONF}/sql-layer.policy"

    if [ -n "$pidpath" ]; then
        fdbsql_parms="$fdbsql_parms -Dfdbsql.pidfile=$pidpath"
    fi

    if [ -f "$FDBSQL_CONF/jvm.options" ]; then
        . "$FDBSQL_CONF/jvm.options"
    fi

    if [ -n "$usegui" ]; then
        fdbsql_parms="$fdbsql_parms -Dcom.persistit.showgui=true"
    fi

    fdbsql_parms="$fdbsql_parms -Dfdbsql.home=$FDBSQL_HOME -Dfdbsql.config_dir=$FDBSQL_CONF"
    fdbsql_parms="$fdbsql_parms -Dlog4j.configuration=file:$FDBSQL_CONF/log4j.properties"
    fdbsql_parms="$fdbsql_parms $print_compilation $props"
    fdbsql_parms="$fdbsql_parms $SEC_MAN $POLICY_FILE"

    CLASSPATH=$JAR_FILE:$JAR_RF_FILE:$DEP_DIR/*
    main_class="com.foundationdb.sql.Main"
    if [ -n "$mode" ]; then
        if [ "$mode" == "window" ]; then
          fdbsql_parms="$fdbsql_parms -Drequire:com.foundationdb.sql.ui.SwingConsoleService -Dprioritize:com.foundationdb.sql.ui.SwingConsoleService -Dfdbsql.std_to_log=false"
          main_class=com.foundationdb.sql.ui.MainWithSwingConsole
        fi
        if [ -n "$profile" ]
        then
            echo_quiet $profile "$JVM_OPTS $fdbsql_parms -cp $CLASSPATH" "$JAVA" $main_class
            exec $profile "$JVM_OPTS $fdbsql_parms -cp $CLASSPATH" "$JAVA" $main_class
        else
            echo_quiet "$JAVA" $JVM_OPTS $fdbsql_parms -cp "$CLASSPATH" $main_class
            exec "$JAVA" $JVM_OPTS $fdbsql_parms -cp "$CLASSPATH" $main_class
        fi
    else
        if [ -n "$profile" ]
        then
            exec nohup $profile "$JVM_OPTS $fdbsql_parms -cp $CLASSPATH" "$JAVA" $main_class <&- &
        else
            exec nohup "$JAVA" $JVM_OPTS $fdbsql_parms -cp "$CLASSPATH" $main_class <&- &
        fi

        wait_on_pid "$pidpath"
    fi

    return $?
}

# Parse any command line options.
args=`getopt c:d:D:fghH:j:kMp:qswv: "$@"`
eval set -- "$args"

while true; do
    case "$1" in
        -d)
            depdir="$2"
            shift 2
        ;;
        -D)
            properties="$properties -D$2"
            shift 2
        ;;
        -c)
            conf="$2"
            shift 2
        ;;
        -f)
            mode="foreground"
            shift
        ;;
        -w)
            mode="window"
            shift
        ;;
        -g)
            gui="yes"
            shift
        ;;
        -h)
            echo "Usage: $0 [-c conf_dir] [-d dep_dir] [-D prop] [-f] [-g] [-h] [-H home_dir] [-j jar_file] [-k] [-p pid_file] [-s] [-w] [-v]"
            echo "-c configuration directory to use"
            echo "-d directory with jar dependencies"
            echo "-D extra property to pass to JVM, can be repeated"
            echo "-f launch the SQL layer process in the foreground"
            echo "-g launch the persistit GUI"
            echo "-h print this help message"
            echo "-H directory to use for home"
            echo "-j specify a jar file to use"
            echo "-k kill an existing SQL layer process"
            echo "-m specify a policy file to use"
            echo "-M switch off the security manager"
            echo "-p specify a pid file"
            echo "-s profile using Solaris Studio"
            echo "-w start console window"
            echo "-v print SQL layer version"
            exit 0
        ;;
        -H)
            homedir="$2"
            shift 2
        ;;
        -j)
            jarfile="$2"
            shift 2
        ;;
        -k)
            # this is not ideal but is only intended to be
            # called by a developer in their environment when
            # they want to quickly kill a running process.
            pgrep -u `whoami` -f fdb-sql-layer | xargs kill -9
            exit 0
        ;;
        -M) 
            SECURITYMAN="false"
            shift
        ;;
        -q)
            QUIET="yes"
            shift
        ;;
        -p)
            pidfile="$2"
            shift 2
        ;;
        -s)
            profile=`which collect`
            profile="$profile -y SIGCONT -j on -J "
            print_compilation="$fdbsql_parms -XX:+PrintCompilation"
            shift
        ;;
        -v)
            get_version "$homedir" "$jarfile" "$depdir"
            exit 0
        ;;
        --)
            shift
            break
        ;;
        *)
            echo "Error parsing arguments!" >&2
            exit 1
        ;;
    esac
done

# Start up the service
launch_service "$homedir" "$mode" "$properties" "$gui" "$pidfile" "$jarfile" "$depdir" "$conf"

exit $?

