---
- Properties: sys-mysql
- suppressed: true
---  # based on files in server /src/test/resources/com/foundationdb/sql/pg/select
- Properties: random-cost
- suppressed: true
---
- Include: all-schema.yaml
---
- Statement: SELECT c1.name, c2.name FROM customers c1, customers c2 ORDER BY c1.name, c2.name
- output: [['Jones','Jones'],['Jones','Smith'],['Smith','Jones'],['Smith','Smith']]
---
- Statement: SELECT name FROM customers, orders o1, orders o2 WHERE customers.cid = o1.cid AND customers.cid = o2.cid AND o1.order_date = '2011-03-01' AND o2.order_date = '2011-03-02';
- output: [['Smith']]
---
- Statement: SELECT c.name, x.order_date FROM customers c LEFT JOIN (SELECT cid, order_date FROM orders WHERE order_date < '2011-03-01') x ON c.cid = x.cid;
- output_ordered: [['Smith',null],['Jones','2011-02-28']]

--- # Test joins between signed and unsigned types
- CreateTable: t_signed(id_signed INT, s_value INT)
---
- CreateTable: t_unsigned(id_unsigned INT UNSIGNED, u_value INT)
---
- Statement: INSERT INTO t_signed VALUES (-2147483648, 0), (-2, 0), (-1, 0), (0, 0), (1, 0), (2, 0), (2147483647, 0),
    (101,100), (102,100), (103,100), (104,100), (105,100), (106,100), (107,100), (108,100), (109,100), (110,100),
    (111,100), (112,100), (113,100), (114,100), (115,100), (116,100), (117,100), (118,100), (119,100), (120,100);
---
- Statement: INSERT INTO t_unsigned VALUES (0, 0), (1, 0), (2, 0), (4294967295, 0),
    (201,100), (202,100), (203,100), (204,100), (205,100), (206,100), (207,100), (208,100), (209,100), (210,100),
    (211,100), (212,100), (213,100), (214,100), (215,100), (216,100), (217,100), (218,100), (219,100), (220,100);
---
# First pair of tests: no indexes, so we have to do a group scan on both tables with a select
- Statement: EXPLAIN SELECT id_signed, s_value FROM t_signed JOIN t_unsigned ON id_signed = id_unsigned
- output: [["Map_NestedLoops()"],
           ["  Filter_Default(t_signed)"],
           ["    GroupScan_Default(t_signed)"],
           ["  Project_Default(t_signed.id_signed, t_signed.s_value)"],
           ["    Filter_Default(t_unsigned)"],
           ["      Select_HKeyOrdered(t_unsigned.id_unsigned == t_signed.id_signed)"],
           ["        GroupScan_Default(t_unsigned)"]]
---
- Statement: SELECT id_signed, s_value FROM t_signed JOIN t_unsigned ON id_signed = id_unsigned
- output: [[0, 0], [1, 0], [2, 0]]
---
# Next pair: indexes such that the t_signed table's index is outer
- Statement: CREATE INDEX s_idx ON t_signed(s_value, id_signed)
---
- Statement: CREATE UNIQUE INDEX u_idx ON t_unsigned(id_unsigned)
---
- Statement: ALTER TABLE t_signed ALL UPDATE STATISTICS
---
- Statement: ALTER TABLE t_unsigned ALL UPDATE STATISTICS
---
- Statement: EXPLAIN SELECT id_signed, s_value FROM t_signed JOIN t_unsigned ON id_signed = id_unsigned WHERE s_value < 100
- output: [["Map_NestedLoops()"],
           ["  IndexScan_Default(Index(t_signed.s_idx), s_value < 100, id_signed)"],
           ["  Project_Default(t_signed.id_signed, t_signed.s_value)"],
           ["    IndexScan_Default(Index(t_unsigned.u_idx), id_unsigned = t_signed.id_signed)"]]
---
- Statement: SELECT id_signed, s_value FROM t_signed JOIN t_unsigned ON id_signed = id_unsigned WHERE s_value < 100
- output: [[0, 0], [1, 0], [2, 0]]
---
- Statement: DROP INDEX s_idx
---
- Statement: DROP INDEX u_idx
---
# Next pair: same as above, but with the signed and unsigned tables swapped in terms of index creation and predicates.
# This is to ensure that we didn't just get lucky by virtue of the normalization happening to cast both id_signed
# and id_unsigned to the type that happened to be indexed
- Statement: CREATE INDEX s_idx ON t_signed(id_signed)
---
- Statement: CREATE UNIQUE INDEX u_idx ON t_unsigned(u_value, id_unsigned)
---
- Statement: ALTER TABLE t_signed ALL UPDATE STATISTICS
---
- Statement: ALTER TABLE t_unsigned ALL UPDATE STATISTICS
---
- Statement: EXPLAIN SELECT id_unsigned, u_value FROM t_signed JOIN t_unsigned ON id_signed = id_unsigned WHERE u_value < 100
- output: [["Map_NestedLoops()"],
           ["  IndexScan_Default(Index(t_unsigned.u_idx), u_value < 100, id_unsigned)"],
           ["  Project_Default(t_unsigned.id_unsigned, t_unsigned.u_value)"],
           ["    IndexScan_Default(Index(t_signed.s_idx), id_signed = t_unsigned.id_unsigned)"]]
---
- Statement: SELECT id_unsigned, u_value FROM t_signed JOIN t_unsigned ON id_signed = id_unsigned WHERE u_value < 100
- output: [[0, 0], [1, 0], [2, 0]]
---
- Statement: SELECT * FROM customers JOIN orders USING(cid) WHERE cid = 1;
- output: [['1','Smith','101','2011-03-01'],['1','Smith','102','2011-03-02']]
---
- Statement: SELECT * FROM customers RIGHT OUTER JOIN orders USING(cid) WHERE cid = 1;
- output: [['1','Smith','101','2011-03-01'],['1','Smith','102','2011-03-02']]
---
- Statement: SELECT * FROM customers FULL OUTER JOIN orders USING(cid);
- error: ['0A50B'] # FULL OUTER JOIN is temporarily not supported
---
- Statement: SELECT * FROM customers FULL OUTER JOIN orders ON customers.cid = orders.cid;
- error: ['0A50B'] # FULL OUTER JOIN is temporarily not supported
...