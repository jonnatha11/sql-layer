---
- CreateTable: artists (id serial PRIMARY KEY, name varchar(255));
---
- CreateTable: albums (id serial PRIMARY KEY, name varchar(255), artist_id integer REFERENCES artists);
---
- CreateTable: tags (id serial PRIMARY KEY, name varchar(255));
---
- CreateTable: albums_tags (album_id integer REFERENCES albums, tag_id integer REFERENCES tags);
---
- Statement: INSERT INTO albums (name) VALUES ('Al') RETURNING *;
---
- Statement: INSERT INTO artists (name) VALUES ('Ar') RETURNING *;
---
- Statement: INSERT INTO tags (name) VALUES ('T') RETURNING *;
---
- Statement: INSERT INTO albums (name) VALUES ('Al2') RETURNING *;
---
- Statement: INSERT INTO artists (name) VALUES ('Ar2') RETURNING *;
---
- Statement: INSERT INTO tags (name) VALUES ('T2') RETURNING *;
---
- Statement: SELECT * FROM artists WHERE (artists.id NOT IN (SELECT id FROM albums WHERE (albums.id IN (1, 2) AND albums.id = 3)));
- row_count: 2
---
- Statement: SELECT * FROM artists WHERE (artists.id NOT IN (SELECT albums.id FROM albums WHERE (albums.id IN (1, 2) AND albums.id = 2)));
- output: [ [1, 'Ar'] ]
---
- Statement: SELECT * FROM artists WHERE (artists.id IN (SELECT albums.id FROM albums WHERE (albums.id IN (1, 2) AND albums.id = 3)));
- row_count: 0
---
- Statement: SELECT * FROM artists WHERE (artists.id IN (SELECT albums.id FROM albums WHERE (albums.id IN (1, 2) AND albums.id = 2)));
- output: [ [2, 'Ar2'] ]
...
