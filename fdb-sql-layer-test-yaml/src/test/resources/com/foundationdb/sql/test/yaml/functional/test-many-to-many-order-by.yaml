---
- CreateTable:  a (
    id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    data VARCHAR(50) NULL,
    PRIMARY KEY (id));
---
- CreateTable:  b (
    id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    data VARCHAR(50) NULL,
    PRIMARY KEY (id));
---
- CreateTable:  m2m (
    id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    aid INTEGER NULL,
    bid INTEGER NULL,
    PRIMARY KEY (id),
    FOREIGN KEY(aid) REFERENCES a (id),
    FOREIGN KEY(bid) REFERENCES b (id));
---
- Statement: INSERT INTO a (id, data) VALUES (1, 'a1'), (2, 'a2');
---
- Statement: INSERT INTO b (id, data) VALUES (1, 'b1'), (2, 'b2'), (3, 'b3'), (4, 'b4');
---
- Statement: INSERT INTO m2m (id, aid, bid) VALUES (2, 1, 1), (4, 2, 4), (1, 1, 3), (6, 2, 2), (3, 1, 2), (5, 2, 3);
---
- Statement: SELECT b.id AS b_id, b.data AS b_data, anon_1.id AS anon_1_a_id, m2m_1.id AS m2m_1_id
             FROM a AS anon_1
             JOIN m2m AS m2m_1 ON anon_1.id = m2m_1.aid
             JOIN b ON b.id = m2m_1.bid
             ORDER BY anon_1.id, m2m_1.id;
- output_already_ordered: [[3, 'b3', 1, 1], [1, 'b1', 1, 2], [2, 'b2', 1, 3], [4, 'b4', 2, 4], [3, 'b3', 2, 5], [2, 'b2', 2, 6]]
---
- Statement: SELECT b.id AS b_id, b.data AS b_data, anon_1.a_id AS anon_1_a_id, m2m_1.id AS m2m_1_id
             FROM (SELECT a.id AS a_id FROM a) AS anon_1
             JOIN m2m AS m2m_1 ON anon_1.a_id = m2m_1.aid
             JOIN b ON b.id = m2m_1.bid
             ORDER BY anon_1.a_id, m2m_1.id;
- output_already_ordered: [[3, 'b3', 1, 1], [1, 'b1', 1, 2], [2, 'b2', 1, 3], [4, 'b4', 2, 4], [3, 'b3', 2, 5], [2, 'b2', 2, 6]]
---
# Third one, force the subquery to stick around, by adding a limit, even though that limit is more than total number of rows in table
- Statement: SELECT b.id AS b_id, b.data AS b_data, anon_1.a_id AS anon_1_a_id, m2m_1.id AS m2m_1_id
             FROM (SELECT a.id AS a_id FROM a LIMIT 10) AS anon_1
             JOIN m2m AS m2m_1 ON anon_1.a_id = m2m_1.aid
             JOIN b ON b.id = m2m_1.bid
             ORDER BY anon_1.a_id, m2m_1.id;
- output_already_ordered: [[3, 'b3', 1, 1], [1, 'b1', 1, 2], [2, 'b2', 1, 3], [4, 'b4', 2, 4], [3, 'b3', 2, 5], [2, 'b2', 2, 6]]
...
