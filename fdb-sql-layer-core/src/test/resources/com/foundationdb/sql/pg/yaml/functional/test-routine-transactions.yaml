---
- CreateTable: nums (n INT)
---
- Statement: INSERT INTO nums VALUES(1),(2),(3)
---
- Statement: >
    CREATE PROCEDURE test_clean(OUT total INT) AS $$
      function fun(total) { 
        var conn = java.sql.DriverManager.getConnection('jdbc:default:connection');
        var stmt = conn.createStatement();
        var rs = stmt.executeQuery('SELECT sum(n) FROM nums');
        rs.next();
        total[0] = rs.getInt(1);
        rs.close();
        stmt.close();
        conn.close();
      }
    $$ LANGUAGE javascript PARAMETER STYLE java EXTERNAL NAME 'fun';
---
- Statement: CALL test_clean()
- output: [[6]]
- warnings_count: 0
---
- Statement: >
    CREATE PROCEDURE test_leaky(OUT total INT) AS $$
      function fun(total) { 
        var conn = java.sql.DriverManager.getConnection('jdbc:default:connection');
        var stmt = conn.createStatement();
        var rs = stmt.executeQuery('SELECT sum(n) FROM nums');
        rs.next();
        total[0] = rs.getInt(1);
      }
    $$ LANGUAGE javascript PARAMETER STYLE java EXTERNAL NAME 'fun';
---
- Statement: CALL test_leaky()
- output: [[6]]
- warnings: [[39001, 'WARN:  Embedded JDBC resource leak: ResultSet was not closed: [SELECT sum(n) FROM nums]']]
---
- Statement: >
    CREATE PROCEDURE test_leak_conn(OUT total INT) AS $$
      function fun(total) { 
        var conn = java.sql.DriverManager.getConnection('jdbc:default:connection');
        conn.setAutoCommit(false);
        var stmt = conn.createStatement();
        var rs = stmt.executeQuery('SELECT sum(n) FROM nums');
        rs.next();
        total[0] = rs.getInt(1);
        rs.close();
      }
    $$ LANGUAGE javascript PARAMETER STYLE java EXTERNAL NAME 'fun';
---
- Statement: CALL test_leak_conn()
- output: [[6]]
- warnings: [[39001, 'WARN:  Embedded JDBC resource leak: Connection with setAutoCommit(false) was not closed']]
---
- Statement: >
    CREATE PROCEDURE test_rs() DYNAMIC RESULT SETS 1 AS $$
      function fun(rs) { 
        var conn = java.sql.DriverManager.getConnection('jdbc:default:connection');
        var stmt = conn.createStatement();
        rs[0] = stmt.executeQuery('SELECT sum(n) FROM nums');
      }
    $$ LANGUAGE javascript PARAMETER STYLE java EXTERNAL NAME 'fun';
---
- Statement: >
    CREATE PROCEDURE test_q(IN q DOUBLE, OUT total DOUBLE) AS $$
      function fun(q, total) { 
        var conn = java.sql.DriverManager.getConnection('jdbc:default:connection');
        var stmt = conn.prepareStatement('SELECT sum(n / ?) FROM nums');
        stmt.setDouble(1, q);
        var rs = stmt.executeQuery();
        rs.next();
        total[0] = rs.getDouble(1);
        rs.close();
      }
    $$ LANGUAGE javascript PARAMETER STYLE java EXTERNAL NAME 'fun';
---
- Statement: >
    CREATE PROCEDURE test_outer(OUT total DOUBLE) AS $$
      function fun(total) { 
        var conn = java.sql.DriverManager.getConnection('jdbc:default:connection');
        var stmt1 = conn.prepareStatement('CALL test_rs()');
        var stmt2 = conn.prepareCall('CALL test_q(?, ?)');
        var rs = stmt1.executeQuery();
        while (rs.next()) {
          stmt2.setDouble(1, rs.getDouble(1));
          stmt2.execute();
        }
        rs.close();
        total[0] = stmt2.getDouble(2);
      }
    $$ LANGUAGE javascript PARAMETER STYLE java EXTERNAL NAME 'fun';
---
- Statement: CALL test_outer()
- output: [[1.0]]
- warnings_count: 0
---
# Check that there isn't a leftover transaction.
- Statement: BEGIN
---
- Statement: ROLLBACK
---
- Statement: DROP PROCEDURE test_clean
---
- Statement: DROP PROCEDURE test_leaky
---
- Statement: DROP PROCEDURE test_leak_conn
---
- Statement: DROP PROCEDURE test_rs
---
- Statement: DROP PROCEDURE test_q
---
- Statement: DROP PROCEDURE test_outer
---
- Statement: >
    CREATE FUNCTION test_fun() RETURNS INT
    READS SQL DATA DETERMINISTIC
    LANGUAGE javascript PARAMETER STYLE variables 
    AS $$
        var result;
        var conn = java.sql.DriverManager.getConnection('jdbc:default:connection');
        var stmt = conn.createStatement();
        var rs = stmt.executeQuery('SELECT max(n) FROM nums');
        if (rs.next()) {
            result = rs.getInt(1);
        }
        rs.close();
        stmt.close();
        conn.close();
        result
    $$;
---
- Statement: CALL test_fun()
- output: [[3]]
---
- Statement: SELECT test_fun()+1
- output: [[4]]
---
- Statement: DROP FUNCTION test_fun
...